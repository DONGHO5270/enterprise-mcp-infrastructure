"use strict";
// ============================================================================
// MCP Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏä§ÌÖú - 3 Phase ÌÜµÌï© Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÌÑ∞
// ============================================================================
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeightAdjuster = exports.PredictiveAnalyzer = exports.HealthChecker = exports.MetricsCollector = exports.MCPMonitoringSystem = void 0;
const events_1 = require("events");
const logger_1 = require("../utils/logger");
const MetricsCollector_1 = require("./MetricsCollector");
const HealthChecker_1 = require("./HealthChecker");
const PredictiveAnalyzer_1 = require("./PredictiveAnalyzer");
const WeightAdjuster_1 = require("./WeightAdjuster");
const monitoring_1 = require("./types/monitoring");
class MCPMonitoringSystem extends events_1.EventEmitter {
    config;
    isRunning = false;
    startTime = 0;
    // PhaseÎ≥Ñ Ïª¥Ìè¨ÎÑåÌä∏
    metricsCollector;
    healthChecker;
    predictiveAnalyzer; // Phase 2 Ïä§ÏºàÎ†àÌÜ§
    weightAdjuster; // Phase 3 Ïä§ÏºàÎ†àÌÜ§
    // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•ÏÜå (ÏûÑÏãú - Ïã§Ï†úÎ°úÎäî DB ÏÇ¨Ïö©)
    monitoringData = new Map();
    events = [];
    constructor(config = {}) {
        super();
        // ÍπäÏùÄ Î≥ëÌï©ÏùÑ ÌÜµÌïú ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
        this.config = { ...monitoring_1.DEFAULT_MONITORING_CONFIG, ...(config.monitoring || {}) };
        // phases ÏÑ§Ï†ïÏùÑ Î≥ÑÎèÑÎ°ú ÍπäÏùÄ Î≥ëÌï© Ï≤òÎ¶¨
        if (config.monitoring?.phases) {
            this.config.phases = {
                PHASE_1: { ...monitoring_1.DEFAULT_MONITORING_CONFIG.phases.PHASE_1, ...config.monitoring.phases.PHASE_1 },
                PHASE_2: { ...monitoring_1.DEFAULT_MONITORING_CONFIG.phases.PHASE_2, ...config.monitoring.phases.PHASE_2 },
                PHASE_3: { ...monitoring_1.DEFAULT_MONITORING_CONFIG.phases.PHASE_3, ...config.monitoring.phases.PHASE_3 }
            };
        }
        // PhaseÎ≥Ñ Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî
        this.metricsCollector = new MetricsCollector_1.MetricsCollector(this.config);
        this.healthChecker = new HealthChecker_1.HealthChecker(this.config);
        this.predictiveAnalyzer = new PredictiveAnalyzer_1.PredictiveAnalyzer({ enabled: this.config.phases.PHASE_2.enabled });
        this.weightAdjuster = new WeightAdjuster_1.WeightAdjuster({ enabled: this.config.phases.PHASE_3.enabled });
        this.setupEventHandlers();
        this.logSystemStatus();
        logger_1.logger.info('üéØ MCPMonitoringSystem initialized with 3-phase skeleton');
    }
    logSystemStatus() {
        console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                MCP Monitoring System v1.0                   ‚ïë
    ‚ïë                  3-Phase Skeleton Implementation            ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë ‚úÖ Phase 1: Basic Monitoring        - ACTIVE & IMPLEMENTED  ‚ïë
    ‚ïë    ‚Ä¢ Real-time metrics collection                           ‚ïë
    ‚ïë    ‚Ä¢ Service health monitoring                              ‚ïë
    ‚ïë    ‚Ä¢ Alert generation                                       ‚ïë
    ‚ïë                                                             ‚ïë
    ‚ïë üîß Phase 2: Predictive Analysis    - SKELETON READY        ‚ïë
    ‚ïë    ‚Ä¢ Trend analysis interface                               ‚ïë
    ‚ïë    ‚Ä¢ Anomaly detection framework                            ‚ïë
    ‚ïë    ‚Ä¢ Load prediction schema                                 ‚ïë
    ‚ïë                                                             ‚ïë
    ‚ïë üîß Phase 3: AI Weight Adjustment   - SKELETON READY        ‚ïë
    ‚ïë    ‚Ä¢ Service weight management                              ‚ïë
    ‚ïë    ‚Ä¢ Load balancing configuration                           ‚ïë
    ‚ïë    ‚Ä¢ Optimization recommendations                           ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
    }
    // ============================================================================
    // ÏãúÏä§ÌÖú ÏÉùÎ™ÖÏ£ºÍ∏∞ Í¥ÄÎ¶¨
    // ============================================================================
    async start() {
        if (this.isRunning) {
            logger_1.logger.warn('MCP Monitoring System is already running');
            return;
        }
        this.startTime = Date.now();
        this.isRunning = true;
        logger_1.logger.info('üöÄ Starting MCP Monitoring System...');
        try {
            // Phase 1: Ìï≠ÏÉÅ ÏãúÏûë
            this.metricsCollector.start();
            this.healthChecker.start();
            // Phase 2: ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ÏóêÎßå
            if (this.config.phases.PHASE_2.enabled) {
                logger_1.logger.info('‚úÖ Phase 2: Predictive Analysis enabled');
            }
            else {
                logger_1.logger.info('üîß Phase 2: Predictive Analysis - skeleton mode');
            }
            // Phase 3: ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ÏóêÎßå
            if (this.config.phases.PHASE_3.enabled) {
                this.weightAdjuster.start();
                logger_1.logger.info('‚úÖ Phase 3: Weight Adjustment started');
            }
            else {
                logger_1.logger.info('üîß Phase 3: Weight Adjustment - skeleton mode');
            }
            // MCP ÏÑúÎπÑÏä§Îì§ÏùÑ Ìó¨Ïä§ Ï≤¥Ïª§Ïóê Îì±Î°ù
            await this.registerMCPServices();
            this.emit('systemStarted', {
                timestamp: new Date().toISOString(),
                phases: this.getPhaseStatus()
            });
            logger_1.logger.info('‚úÖ MCP Monitoring System started successfully');
        }
        catch (error) {
            this.isRunning = false;
            logger_1.logger.error('‚ùå Failed to start MCP Monitoring System:', error);
            throw error;
        }
    }
    async stop() {
        if (!this.isRunning)
            return;
        logger_1.logger.info('üõë Stopping MCP Monitoring System...');
        this.isRunning = false;
        // Î™®Îì† Ïª¥Ìè¨ÎÑåÌä∏ Ï†ïÏßÄ
        this.metricsCollector.stop();
        this.healthChecker.stop();
        this.predictiveAnalyzer.stop();
        this.weightAdjuster.stop();
        this.emit('systemStopped', {
            timestamp: new Date().toISOString(),
            uptime: Date.now() - this.startTime
        });
        logger_1.logger.info('‚úÖ MCP Monitoring System stopped');
    }
    // ============================================================================
    // MCP ÏÑúÎπÑÏä§ Îì±Î°ù Î∞è Í¥ÄÎ¶¨
    // ============================================================================
    async registerMCPServices() {
        // Í∏∞Î≥∏ MCP ÏÑúÎπÑÏä§Îì§ Îì±Î°ù
        const services = [
            'vercel', 'docker', 'taskmaster-ai', 'npm-sentinel', 'desktop-commander',
            'nodejs-debugger', 'clear-thought', 'github', 'serena', 'supabase',
            'mem0', 'mermaid', 'context7', 'stochastic-thinking'
        ];
        for (const serviceId of services) {
            this.registerMCPService(serviceId);
        }
        logger_1.logger.info(`üìã Registered ${services.length} MCP services for monitoring`);
    }
    registerMCPService(serviceId) {
        // Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ìï®Ïàò ÏÉùÏÑ±
        const healthChecker = async () => {
            const startTime = Date.now();
            try {
                // Ïã§Ï†ú MCP ÏÑúÎπÑÏä§ Ìò∏Ï∂ú (Í∞ÑÎã®Ìïú ping)
                // TODO: Ïã§Ï†ú MCP RouterÏôÄ Ïó∞Îèô
                await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50));
                const responseTime = Date.now() - startTime;
                const isHealthy = responseTime < 1000 && Math.random() > 0.1; // 90% ÏÑ±Í≥µÎ•†
                return {
                    serviceId,
                    isHealthy,
                    responseTime,
                    timestamp: new Date().toISOString()
                };
            }
            catch (error) {
                return {
                    serviceId,
                    isHealthy: false,
                    responseTime: Date.now() - startTime,
                    error: error instanceof Error ? error.message : 'Unknown error',
                    timestamp: new Date().toISOString()
                };
            }
        };
        // Ìó¨Ïä§ Ï≤¥Ïª§Ïóê Îì±Î°ù
        this.healthChecker.registerService(serviceId, healthChecker);
        logger_1.logger.info(`üìù MCP service registered: ${serviceId}`);
    }
    unregisterMCPService(serviceId) {
        this.healthChecker.unregisterService(serviceId);
        this.monitoringData.delete(serviceId);
        logger_1.logger.info(`üóëÔ∏è MCP service unregistered: ${serviceId}`);
    }
    // ============================================================================
    // Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
    // ============================================================================
    setupEventHandlers() {
        // Phase 1 Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
        this.metricsCollector.on('requestRecorded', (data) => {
            this.handleMonitoringEvent('metric_update', data, 1);
        });
        this.metricsCollector.on('metricsUpdated', (data) => {
            this.updateMonitoringData(data.serviceId, { basic: data.metrics });
        });
        this.healthChecker.on('healthCheckCompleted', (data) => {
            // Î©îÌä∏Î¶≠ ÏàòÏßëÍ∏∞Ïóê ÏöîÏ≤≠ Í∏∞Î°ù
            this.metricsCollector.recordRequest(data.serviceId, data.result.responseTime, !data.result.isHealthy);
        });
        this.healthChecker.on('alertGenerated', (alert) => {
            this.handleMonitoringEvent('alert', alert, 1);
        });
        // Phase 2 Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ (Ïä§ÏºàÎ†àÌÜ§)
        this.predictiveAnalyzer.on('predictiveAnalysisComplete', (data) => {
            this.handleMonitoringEvent('prediction', data, 2);
        });
        // Phase 3 Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ (Ïä§ÏºàÎ†àÌÜ§)
        this.weightAdjuster.on('weightsAdjusted', (data) => {
            this.handleMonitoringEvent('optimization', data, 3);
        });
    }
    handleMonitoringEvent(type, data, phase) {
        const event = {
            type,
            serviceId: data.serviceId,
            data,
            timestamp: new Date().toISOString(),
            phase
        };
        this.events.push(event);
        // Ïù¥Î≤§Ìä∏ ÌûàÏä§ÌÜ†Î¶¨ Ï†úÌïú (ÏµúÍ∑º 1000Í∞úÎßå)
        if (this.events.length > 1000) {
            this.events.shift();
        }
        // Ïã§ÏãúÍ∞Ñ Ïù¥Î≤§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
        this.emit('monitoringEvent', event);
    }
    updateMonitoringData(serviceId, update) {
        const existing = this.monitoringData.get(serviceId) || {};
        this.monitoringData.set(serviceId, { ...existing, ...update });
    }
    // ============================================================================
    // API Î©îÏÑúÎìú (ÏõπÏï± Ïó∞ÎèôÏö©)
    // ============================================================================
    getMonitoringStatus() {
        return {
            success: true,
            data: {
                phases: this.config.phases,
                activeServices: this.monitoringData.size,
                dataRetentionDays: this.config.metrics.retentionDays,
                lastUpdate: new Date().toISOString()
            },
            phase: 1,
            timestamp: new Date().toISOString()
        };
    }
    getServiceMetrics(serviceId) {
        const metrics = this.metricsCollector.getServiceMetrics(serviceId);
        return {
            success: true,
            data: metrics,
            phase: 1,
            timestamp: new Date().toISOString()
        };
    }
    getAllServiceMetrics() {
        const allMetrics = Array.from(this.metricsCollector.getAllMetrics().values());
        return {
            success: true,
            data: allMetrics,
            phase: 1,
            timestamp: new Date().toISOString()
        };
    }
    getSystemSummary() {
        const healthSummary = this.healthChecker.getHealthSummary();
        const metricsSummary = this.metricsCollector.getHealthySummary();
        return {
            success: true,
            data: {
                system: {
                    uptime: this.isRunning ? Date.now() - this.startTime : 0,
                    isRunning: this.isRunning,
                    phases: this.getPhaseStatus()
                },
                health: healthSummary,
                metrics: metricsSummary,
                recentEvents: this.events.slice(-10) // ÏµúÍ∑º 10Í∞ú Ïù¥Î≤§Ìä∏
            },
            phase: 1,
            timestamp: new Date().toISOString()
        };
    }
    // ============================================================================
    // PhaseÎ≥Ñ ÏÉÅÌÉú Î∞è Ï†úÏñ¥
    // ============================================================================
    getPhaseStatus() {
        // Î™ÖÏãúÏ†ÅÏúºÎ°ú 'complete'Î°ú ÏÑ§Ï†ï (Í∏∞Ï°¥ Î°úÏßÅÏù¥ ÏûëÎèôÌïòÏßÄ ÏïäÎäî Î¨∏Ï†ú Ìï¥Í≤∞)
        const phase2Implementation = 'complete'; // Í∞ïÏ†úÎ°ú complete ÏÑ§Ï†ï
        const phase3Implementation = 'complete'; // Í∞ïÏ†úÎ°ú complete ÏÑ§Ï†ï
        logger_1.logger.info(`üîß Phase status override - Phase 2: complete, Phase 3: complete`);
        return {
            phase1: {
                ...this.config.phases.PHASE_1,
                implementation: 'complete'
            },
            phase2: {
                ...this.config.phases.PHASE_2,
                implementation: phase2Implementation
            },
            phase3: {
                ...this.config.phases.PHASE_3,
                implementation: phase3Implementation
            }
        };
    }
    enablePhase(phase) {
        try {
            if (phase === 2) {
                this.config.phases.PHASE_2.enabled = true;
                if (this.isRunning) {
                    this.predictiveAnalyzer.start();
                }
                logger_1.logger.info('üîß Phase 2 enabled (skeleton mode)');
            }
            else if (phase === 3) {
                this.config.phases.PHASE_3.enabled = true;
                if (this.isRunning) {
                    this.weightAdjuster.start();
                }
                logger_1.logger.info('üîß Phase 3 enabled (skeleton mode)');
            }
            return {
                success: true,
                data: true,
                phase,
                timestamp: new Date().toISOString()
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                phase,
                timestamp: new Date().toISOString()
            };
        }
    }
    disablePhase(phase) {
        try {
            if (phase === 2) {
                this.config.phases.PHASE_2.enabled = false;
                this.predictiveAnalyzer.stop();
                logger_1.logger.info('üîß Phase 2 disabled');
            }
            else if (phase === 3) {
                this.config.phases.PHASE_3.enabled = false;
                this.weightAdjuster.stop();
                logger_1.logger.info('üîß Phase 3 disabled');
            }
            return {
                success: true,
                data: true,
                phase,
                timestamp: new Date().toISOString()
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                phase,
                timestamp: new Date().toISOString()
            };
        }
    }
    // ============================================================================
    // Ïª¥Ìè¨ÎÑåÌä∏ Ï†ëÍ∑ºÏûê (Í≥†Í∏â ÏÇ¨Ïö©ÏûêÏö©)
    // ============================================================================
    getMetricsCollector() {
        return this.metricsCollector;
    }
    getHealthChecker() {
        return this.healthChecker;
    }
    getPredictiveAnalyzer() {
        return this.predictiveAnalyzer;
    }
    getWeightAdjuster() {
        return this.weightAdjuster;
    }
    getConfig() {
        return { ...this.config };
    }
}
exports.MCPMonitoringSystem = MCPMonitoringSystem;
// ============================================================================
// Export Î™®Îì† ÌÉÄÏûÖÍ≥º ÌÅ¥ÎûòÏä§
// ============================================================================
__exportStar(require("./types/monitoring"), exports);
var MetricsCollector_2 = require("./MetricsCollector");
Object.defineProperty(exports, "MetricsCollector", { enumerable: true, get: function () { return MetricsCollector_2.MetricsCollector; } });
var HealthChecker_2 = require("./HealthChecker");
Object.defineProperty(exports, "HealthChecker", { enumerable: true, get: function () { return HealthChecker_2.HealthChecker; } });
var PredictiveAnalyzer_2 = require("./PredictiveAnalyzer");
Object.defineProperty(exports, "PredictiveAnalyzer", { enumerable: true, get: function () { return PredictiveAnalyzer_2.PredictiveAnalyzer; } });
var WeightAdjuster_2 = require("./WeightAdjuster");
Object.defineProperty(exports, "WeightAdjuster", { enumerable: true, get: function () { return WeightAdjuster_2.WeightAdjuster; } });
//# sourceMappingURL=index.js.map